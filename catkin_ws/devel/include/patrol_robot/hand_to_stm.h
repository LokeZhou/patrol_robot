// Generated by gencpp from file patrol_robot/hand_to_stm.msg
// DO NOT EDIT!


#ifndef PATROL_ROBOT_MESSAGE_HAND_TO_STM_H
#define PATROL_ROBOT_MESSAGE_HAND_TO_STM_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace patrol_robot
{
template <class ContainerAllocator>
struct hand_to_stm_
{
  typedef hand_to_stm_<ContainerAllocator> Type;

  hand_to_stm_()
    : left_on_off(false)
    , right_on_off(false)
    , back(false)
    , link1(false)
    , link2(false)
    , link3(false)
    , link4(false)
    , front_lwheel_target_velocity(0.0)
    , front_rwheel_target_velocity(0.0)
    , back_lwheel_target_velocity(0.0)
    , back_rwheel_target_velocity(0.0)  {
    }
  hand_to_stm_(const ContainerAllocator& _alloc)
    : left_on_off(false)
    , right_on_off(false)
    , back(false)
    , link1(false)
    , link2(false)
    , link3(false)
    , link4(false)
    , front_lwheel_target_velocity(0.0)
    , front_rwheel_target_velocity(0.0)
    , back_lwheel_target_velocity(0.0)
    , back_rwheel_target_velocity(0.0)  {
    }



   typedef uint8_t _left_on_off_type;
  _left_on_off_type left_on_off;

   typedef uint8_t _right_on_off_type;
  _right_on_off_type right_on_off;

   typedef uint8_t _back_type;
  _back_type back;

   typedef uint8_t _link1_type;
  _link1_type link1;

   typedef uint8_t _link2_type;
  _link2_type link2;

   typedef uint8_t _link3_type;
  _link3_type link3;

   typedef uint8_t _link4_type;
  _link4_type link4;

   typedef float _front_lwheel_target_velocity_type;
  _front_lwheel_target_velocity_type front_lwheel_target_velocity;

   typedef float _front_rwheel_target_velocity_type;
  _front_rwheel_target_velocity_type front_rwheel_target_velocity;

   typedef float _back_lwheel_target_velocity_type;
  _back_lwheel_target_velocity_type back_lwheel_target_velocity;

   typedef float _back_rwheel_target_velocity_type;
  _back_rwheel_target_velocity_type back_rwheel_target_velocity;




  typedef boost::shared_ptr< ::patrol_robot::hand_to_stm_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::patrol_robot::hand_to_stm_<ContainerAllocator> const> ConstPtr;

}; // struct hand_to_stm_

typedef ::patrol_robot::hand_to_stm_<std::allocator<void> > hand_to_stm;

typedef boost::shared_ptr< ::patrol_robot::hand_to_stm > hand_to_stmPtr;
typedef boost::shared_ptr< ::patrol_robot::hand_to_stm const> hand_to_stmConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::patrol_robot::hand_to_stm_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::patrol_robot::hand_to_stm_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace patrol_robot

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'patrol_robot': ['/home/exbot/catkin_ws/src/patrol_robot/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::patrol_robot::hand_to_stm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::patrol_robot::hand_to_stm_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::patrol_robot::hand_to_stm_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82523fc330078554e8f233fc1ade438a";
  }

  static const char* value(const ::patrol_robot::hand_to_stm_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82523fc330078554ULL;
  static const uint64_t static_value2 = 0xe8f233fc1ade438aULL;
};

template<class ContainerAllocator>
struct DataType< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "patrol_robot/hand_to_stm";
  }

  static const char* value(const ::patrol_robot::hand_to_stm_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool  left_on_off\n\
bool  right_on_off\n\
bool  back\n\
bool  link1\n\
bool  link2\n\
bool  link3\n\
bool  link4\n\
float32 front_lwheel_target_velocity\n\
float32 front_rwheel_target_velocity\n\
float32 back_lwheel_target_velocity\n\
float32 back_rwheel_target_velocity\n\
";
  }

  static const char* value(const ::patrol_robot::hand_to_stm_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left_on_off);
      stream.next(m.right_on_off);
      stream.next(m.back);
      stream.next(m.link1);
      stream.next(m.link2);
      stream.next(m.link3);
      stream.next(m.link4);
      stream.next(m.front_lwheel_target_velocity);
      stream.next(m.front_rwheel_target_velocity);
      stream.next(m.back_lwheel_target_velocity);
      stream.next(m.back_rwheel_target_velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct hand_to_stm_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::patrol_robot::hand_to_stm_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::patrol_robot::hand_to_stm_<ContainerAllocator>& v)
  {
    s << indent << "left_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.left_on_off);
    s << indent << "right_on_off: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.right_on_off);
    s << indent << "back: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.back);
    s << indent << "link1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.link1);
    s << indent << "link2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.link2);
    s << indent << "link3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.link3);
    s << indent << "link4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.link4);
    s << indent << "front_lwheel_target_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.front_lwheel_target_velocity);
    s << indent << "front_rwheel_target_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.front_rwheel_target_velocity);
    s << indent << "back_lwheel_target_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.back_lwheel_target_velocity);
    s << indent << "back_rwheel_target_velocity: ";
    Printer<float>::stream(s, indent + "  ", v.back_rwheel_target_velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PATROL_ROBOT_MESSAGE_HAND_TO_STM_H
