"""autogenerated by genpy from patrol_robot/hand_to_stm.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hand_to_stm(genpy.Message):
  _md5sum = "82523fc330078554e8f233fc1ade438a"
  _type = "patrol_robot/hand_to_stm"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool  left_on_off
bool  right_on_off
bool  back
bool  link1
bool  link2
bool  link3
bool  link4
float32 front_lwheel_target_velocity
float32 front_rwheel_target_velocity
float32 back_lwheel_target_velocity
float32 back_rwheel_target_velocity

"""
  __slots__ = ['left_on_off','right_on_off','back','link1','link2','link3','link4','front_lwheel_target_velocity','front_rwheel_target_velocity','back_lwheel_target_velocity','back_rwheel_target_velocity']
  _slot_types = ['bool','bool','bool','bool','bool','bool','bool','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       left_on_off,right_on_off,back,link1,link2,link3,link4,front_lwheel_target_velocity,front_rwheel_target_velocity,back_lwheel_target_velocity,back_rwheel_target_velocity

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hand_to_stm, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.left_on_off is None:
        self.left_on_off = False
      if self.right_on_off is None:
        self.right_on_off = False
      if self.back is None:
        self.back = False
      if self.link1 is None:
        self.link1 = False
      if self.link2 is None:
        self.link2 = False
      if self.link3 is None:
        self.link3 = False
      if self.link4 is None:
        self.link4 = False
      if self.front_lwheel_target_velocity is None:
        self.front_lwheel_target_velocity = 0.
      if self.front_rwheel_target_velocity is None:
        self.front_rwheel_target_velocity = 0.
      if self.back_lwheel_target_velocity is None:
        self.back_lwheel_target_velocity = 0.
      if self.back_rwheel_target_velocity is None:
        self.back_rwheel_target_velocity = 0.
    else:
      self.left_on_off = False
      self.right_on_off = False
      self.back = False
      self.link1 = False
      self.link2 = False
      self.link3 = False
      self.link4 = False
      self.front_lwheel_target_velocity = 0.
      self.front_rwheel_target_velocity = 0.
      self.back_lwheel_target_velocity = 0.
      self.back_rwheel_target_velocity = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_7B4f.pack(_x.left_on_off, _x.right_on_off, _x.back, _x.link1, _x.link2, _x.link3, _x.link4, _x.front_lwheel_target_velocity, _x.front_rwheel_target_velocity, _x.back_lwheel_target_velocity, _x.back_rwheel_target_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.left_on_off, _x.right_on_off, _x.back, _x.link1, _x.link2, _x.link3, _x.link4, _x.front_lwheel_target_velocity, _x.front_rwheel_target_velocity, _x.back_lwheel_target_velocity, _x.back_rwheel_target_velocity,) = _struct_7B4f.unpack(str[start:end])
      self.left_on_off = bool(self.left_on_off)
      self.right_on_off = bool(self.right_on_off)
      self.back = bool(self.back)
      self.link1 = bool(self.link1)
      self.link2 = bool(self.link2)
      self.link3 = bool(self.link3)
      self.link4 = bool(self.link4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_7B4f.pack(_x.left_on_off, _x.right_on_off, _x.back, _x.link1, _x.link2, _x.link3, _x.link4, _x.front_lwheel_target_velocity, _x.front_rwheel_target_velocity, _x.back_lwheel_target_velocity, _x.back_rwheel_target_velocity))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 23
      (_x.left_on_off, _x.right_on_off, _x.back, _x.link1, _x.link2, _x.link3, _x.link4, _x.front_lwheel_target_velocity, _x.front_rwheel_target_velocity, _x.back_lwheel_target_velocity, _x.back_rwheel_target_velocity,) = _struct_7B4f.unpack(str[start:end])
      self.left_on_off = bool(self.left_on_off)
      self.right_on_off = bool(self.right_on_off)
      self.back = bool(self.back)
      self.link1 = bool(self.link1)
      self.link2 = bool(self.link2)
      self.link3 = bool(self.link3)
      self.link4 = bool(self.link4)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_7B4f = struct.Struct("<7B4f")
